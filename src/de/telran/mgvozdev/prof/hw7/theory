1. Что такое Iterator?
    Интерфейс, который представляет собой механизм для последовательного перебора элементов коллекции

2. В чем различие Iterator от Iterable?
    Iterable - это интерфейс, который обозначает, что объект можно перебирать (итерировать).

3. В чем преимущество Iterator по сравнению с Enumeration?
    Iterator является более гибким и функциональным. Iterator параметризован, что означает, что вы можете указать тип
    элементов, которые вы ожидаете получить. Это позволяет избежать ошибок при получении элементов из коллекции.
    Iterator предоставляет метод remove(), который позволяет удалять элементы из коллекции во время итерации.

4. Какие особенности есть у ListIterator?
    ListIterator позволяет итерировать по элементам коллекции как вперед, так и назад. Можно использовать методы
    next() и previous() для перемещения вперед и назад по коллекции.
    ListIterator предоставляет методы add(), set() и remove(), которые позволяют вставлять, заменять и удалять элементы
    в текущей позиции итератора.
    Кроме методов nextIndex() и previousIndex(), ListIterator также предоставляет метод hasPrevious(), который позволяет
    проверить наличие предыдущего элемента.
    ListIterator позволяет более тонко управлять процессом итерации и изменениями в списке. Вы можете добавлять,
    удалять и заменять элементы в любой точке итерации.

5. Какие методы обязательны к реализации в Iterator?
    hasNext() и next()

6. Какую функциональность предоставляет Iterable?
    Он определяет один метод iterator():
    Этот метод возвращает объект, реализующий интерфейс Iterator, который используется для перебора элементов коллекции.
    Классы, реализующие Iterable, обычно возвращают новый экземпляр Iterator при каждом вызове этого метода.
    Интерфейс Iterable используется для поддержки циклов for-each (расширенных циклов) и других механизмов перебора элементов.

7. Для чего преимущественно нужен Spliterator?
    Основное предназначение Spliterator заключается в облегчении параллельной обработки данных в коллекциях или других
    структурах данных. Он предоставляет методы для разделения и обработки данных, что позволяет эффективно использовать
    многопоточное программирование для ускорения обработки больших объемов данных.

8. Какие способы прохода по коллекции знаете?
    Цикл for-each (Enhanced for loop),
    Итератор (Iterator),
    ListIterator,
    Цикл for,
    Stream API
