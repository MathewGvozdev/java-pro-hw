1. Как оптимизирован ArrayList?
    Использование начальной емкости (initialCapacity), уменьшение размера после удаления элементов методом trimToSize()

2. Что такое Set?
    Set - интерфейс, который представляет собой коллекцию, содержащую только уникальные элементы

3. Что дополнительно привносит SortedSet? что привносит NavigatableSet
    SortedSet - подинтерфейс Set, в котором элементы хранятся в отсортированном порядке
    NavigableSet - подинтерфейс SortedSet, который имеет методы для навигации и поиска в упорядоченном множестве
    (higher(), lower(), ceiling(), и floor())

4. В какую реализацию Set можно добавить null?
    HashSet

5. Для чего лучше использовать TreeSet, для чего HashSet?
    HashSet не гарантирует порядок элементов
    TreeSet хранит элементы в отсортированном порядке (естественном или заданном компаратором).

6. В чем разница HashSet и LinkedHashSet?
    HashSet - реализация Set, использующая хеш-таблицу для хранения элементов. Она обеспечивает быстрое добавление,
    удаление и поиск элементов, но не гарантирует порядок элементов
    LinkedHashSet - это реализация Set, которая расширяет HashSet, чтобы поддерживать порядок вставки элементов.
    Это значит, что элементы будут храниться и перебираться в порядке, в котором они были добавлены.

7. Что необходимо реализовать, чтобы использовать HashSet?
    Интерфейс Set -> Collection

8. Какие объекты мы можем добавлять в TreeSet?
     В TreeSet можно добавлять объекты, которые реализуют интерфейс Comparable или которым можно предоставить собственный
     компаратор через конструктор TreeSet. Это позволяет определить, как будет происходить сортировка элементов внутри TreeSet.